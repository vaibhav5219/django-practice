"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 2.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '3cx68dal*e#xzkcikq1xyo4hgao5nc-71vz0p#!^03=3d)b_$g'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# os.environ.setdefault("DJANGO_SETTINGS_MODULE", "core.settings")
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'home',
    'accounts',
    'vege',
    # 'populate_books',
    'textsearch',
    'django.contrib.postgres',
    'djmiddleware',
    'imageresizer',
    "debug_toolbar",
    'cronjob',
    'django_crontab', # will work in ubuntu
    'elasticsearch_app',
    'django_elasticsearch_dsl',
    'scraper',
    'django_celery_beat', # Will work in ubuntu
    'rabbit_mq_app',
    'kafka_zookeeper_app',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'core.middleware.middleware.IPBlockingMiddleware', # custom middleware
    # 'middleware.middleware.IPBlockingMiddleware',
    # 'middleware.middleware.CheckBmpHeader',
    "debug_toolbar.middleware.DebugToolbarMiddleware",
]

INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }

DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': 'search',
            'USER': 'postgres',
            'PASSWORD': 'root',
            'HOST': 'localhost',
            'PORT': '5432',
        }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'                 # URL for static files	
STATIC_ROOT = 'static/'      # Directory for collected static files	

MEDIA_URL = '/media/'                   # URL for uploaded files	
MEDIA_ROOT = 'media/'         # Directory for uploaded media files	


''' 
Also need Memurai for windows redis
For creating cash table -
pip install django-redis

python manage.py createcachetable
'''
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",  # âœ… Correct path
        "LOCATION": "redis://127.0.0.1:6379/1",      # Update if needed
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

''' Will work in ubuntu 
pip install django-crontab
python manage.py crontab add 
'''
CRONJOBS = [
    ('*/1 * * * *', 'cronjob.cron.my_scheduled_job')
]


# CRONJOBS = [
#     ('*/5 * * * *', 'myapp.cron.other_scheduled_job', ['arg1', 'arg2'], {'verbose': 0}),
#     ('0   4 * * *', 'django.core.management.call_command', ['clearsessions']),
# ]

'''
Installation and Configuration of elastic search 
1> pip install django-elasticsearch-dsl
2> Configure in settings.py
3> Mention in installed_app
4> Create documents.py
5> run python manage.py search_index '--create','--populate', '--delete' or '--rebuild' .

After running C:\\elasticsearch-9.0.0\\bin\\elasticsearch.bat using cmd admin
And browse - http://localhost:9200/products/_search?q=fashion
'''
# ELASTICSEARCH_DSL={
#     'default': {
#         'hosts': 'https://localhost:9200',
#         'basic_auth': ('elastic', 'search'),
#         'verify_certs' : False,
#         'ssl_show_warn' : False,
#         'ca_certs' : r'C:\\Program Files\\elasticsearch-9.0.0\\elasticsearch-9.0.0\\config\\certs',
#     }
# }
ELASTICSEARCH_DSL = {
    'default': {
        'hosts': 'http://localhost:9200',
        # 'http_auth': ('elastic', 'search'),
        # 'verify_certs': False,  # or use 'ca_certs': 'path/to/http_ca.crt'
    },
}

''' CELERY Configuration Setup-
1. Install Redis(Memurai in windows) and celery
2. Create CELERY setup in celery.py file
3. Import CELERY in __init__.py file
4. Also intall eventlet (For windows users only )
4. Add Below lines in settings.py file 
5. command =>>>>  celery -A core worker -l INFO -P eventlet   ## core is the project name - FOr windows
                  celery -A core worker --loglevel=info
'''
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

''' CELERY BEAT CONFIGURATION ( Will not work in windows )
1. pip install django-celery-beat
2. Add app in settings.py =>  'django_celery_beat',
3. Run command => python manage.py migrate django_celery_beat
4. Create Task
5. Run CELERY
6. RUN CELERY BEAT => celery -A [project-name] beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler

'''